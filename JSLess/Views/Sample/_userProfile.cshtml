@using JSLess
@using JSLess.Models
@model UserProfile
@{
    Layout = "~/Views/Layouts/_Partial.cshtml";
    ViewBag.Title = "UserProfile";
    List<string> industryList = ViewBag.IndustryList ?? new List<string>();
    List<string> rolesList = ViewBag.RolesList ?? new List<string>();
    Dictionary<string, Guid> itemList = ViewBag.ItemList ?? new Dictionary<string, Guid>() { };


    var formButton = new object[]              { 
                 new { 
                     name = "htmlform", 
                     url = "/Sample/UserProfile", 
                     method="POST",
                     onSuccess = ".div1", 
                     onFail = ".div3", 
                     @params = 
                     new { 
                         test = 1, 
                         test2 = "foobar" } 
                 } 
             };
}

<form class="clearAfter" data-jsless="@(formButton.ToJsonObject())">
    <h3>UserProfile</h3>
    <input type="button" value="post" data-jsless="@(formButton.ToJsonObject())" />
    <input type="submit" value="submit" />
    <div>
        @Html.ValidationSummary(true)
        <div class="editor-label">
            @Html.LabelFor(model => model.FullName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FullName)
        </div>
        <div style="float: none">
            <div>
                <div>
                    Industries:
                </div>
                @foreach (String s in industryList)
                {
                    <div>
                        <label>
                            <input type="checkbox" data-list="Industries" @(Model.Industries.Any(o => o == s) ? "checked=\"checked\"" : "")  value="@s" />@s</label>
                    </div>
                }
            </div>
            <div>
                <div>
                    Industries (Complex):
                </div>
                @foreach (String s in industryList)
                {
                    <div data-list="CI" style="padding-bottom: 10px;">
                        <label>
                            <input type="checkbox" name="visible"  @(Model.Industries.Any(o => o == s) ? "checked=\"checked\"" : "")  /></label>
                        <label>
                            @s:
                            <input type="text" name="displayname"  @(Model.Industries.Any(o => o == s) ? "checked=\"checked\"" : "")  value="@s" />
                            <input type="hidden" name="name" value="@s" />

                        </label>
                        <div data-list="options">
                            <label>
                                Region:
                            <input type="text" name="region" value="region1" />
                            </label>
                            <label>
                                Reviewed:
                            <input type="checkbox" name="reviewed" />
                            </label>
                            <label>
                                Watchlist:
                            <input type="checkbox" name="watchlist" />
                            </label>
                        </div>
                        <div data-list="options">
                            <label>
                                Region:
                            <input type="text" name="region" value="region2" />
                            </label>
                            <label>
                                Reviewed:
                            <input type="checkbox" name="reviewed" />
                            </label>
                            <label>
                                Watchlist:
                            <input type="checkbox" name="watchlist" />
                            </label>
                        </div>
                    </div>
                }
            </div>
            <div style="padding: 20px 20px 20px 20px">
                <div>Roles:</div>
                <select name="Roles" multiple="multiple" size="5">
                    @foreach (String r in rolesList)
                    {                        
                        <option value="@r" @(Model.Roles.Any(o => o == r) ? "selected=\"selected\"" : "")>@r</option>                        
                    }
                </select>
            </div>
            <div style="padding: 20px 20px 20px 20px">
                <div>ItemCounts:</div>
                <div>
                    @foreach (var item in itemList)
                    { 
                        <div>
                            <label for="ItemCounts_@item.Value">@item.Key
                            </label>
                            <input id="ItemCounts_@item.Value" name="ItemCounts" data-index="@item.Value" value="@(Model.ItemCounts.ContainsKey(item.Value) ? Model.ItemCounts[item.Value] : 0)" />
                        </div>
                    }
                </div>

            </div>
        </div>
        <div name="nested">
            <h4>Nested name Test</h4>
            <div class="editor-label">
                <label>Test1</label>
            </div>
            <div class="editor-field">
                <input type="text" name="test1" value="abc" />
            </div>
            <div class="editor-label">
                <label>Test2</label>
            </div>
            <div class="editor-field">
                <input type="text" name="test2" value="def" />
            </div>
            <div name="deeper">
                <div class="editor-label">
                    <label>Test3</label>
                </div>
                <div class="editor-field">
                    <input type="text" name="test3" value="ghi" />
                </div>
                <div name="testDict"  data-index="@Guid.NewGuid()">
                    <input type="hidden" value="joe" name="name" />
                    <input type="hidden" value="white" name="color" />
                </div>
                <div name="testDict"  data-index="@Guid.NewGuid()">
                    <input type="hidden" value="bob" name="name" />
                </div>
                <div name="testDict"  data-index="@Guid.NewGuid()">
                    <input type="hidden" value="blue" name="color" />
                </div>
            </div>

        </div>

        <div style="">
            <h4>The address is a complex type - lets see how it posts</h4>
            <div class="editor-label">
                @Html.LabelFor(model => model.HomeAddress.Address1)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HomeAddress.Address1)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HomeAddress.Address2)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HomeAddress.Address2)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HomeAddress.City)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HomeAddress.City)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HomeAddress.State)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HomeAddress.State)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.HomeAddress.PostalCode)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HomeAddress.PostalCode)
            </div>

        </div>
    </div>
</form>
